/* autogenerated by Processing revision 1293 on 2024-09-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Client extends PApplet {

final int WINDOW_WIDTH = 700;
final int WINDOW_HEIGHT = 700;

final int DARK_GREEN = color(0, 55, 0);
final int DARK_GRAY = color(50, 50, 50);

final int LEFT = 1;
final int RIGHT = 2;
final int UP = 3;
final int DOWN = 4;

public void settings()
{
  size(WINDOW_WIDTH, WINDOW_HEIGHT);
}

Lane leftLane;
Lane rightLane;
Lane topLane;
Lane bottomLane;

public void setup()
{
  noStroke();
  rectMode(CENTER);
}

public void draw()
{
  background(DARK_GREEN);
  fill(DARK_GRAY);
  noStroke();
  rect((WINDOW_WIDTH/2), (WINDOW_HEIGHT/2), WINDOW_WIDTH, (WINDOW_HEIGHT/6.363f));
  rect((WINDOW_WIDTH/2), (WINDOW_HEIGHT/2), (WINDOW_WIDTH/6.363f), WINDOW_HEIGHT);

  Lane leftLane = new Lane();
  Lane rightLane = new Lane();
  Lane topLane = new Lane();
  Lane bottomLane = new Lane();

  leftLane.trafficLightCarBehavior(leftCar, leftLight);
  rightLane.trafficLightCarBehavior(rightCar, rightLight);
  topLane.trafficLightCarBehavior(topCar, topLight);
  bottomLane.trafficLightCarBehavior(bottomCar, bottomLight);
}
final int BLACK = color(0);

class Car
{
  float x, y, currentSpeed, maxSpeed;
  int direction;
  int carColor;

  Car(float x, float y, float maxSpeed, int carColor, int direction)
  {
    this.x = x;
    this.y = y;
    this.currentSpeed = maxSpeed;
    this.maxSpeed = maxSpeed;
    this.direction = direction;
    this.carColor = carColor;
  }

  public float getX()
  {
    return x;
  }

  public float getY()
  {
    return y;
  }

  public void draw()
  {
    //Car body
    stroke(BLACK);
    strokeWeight(1);
    fill(this.carColor);
    if(this.direction == LEFT || this.direction == RIGHT) {rect(x, y, (WINDOW_WIDTH / 15.555f), WINDOW_HEIGHT / 20.000f);}
    else if(this.direction == UP || this.direction == DOWN) {rect(x, y, (WINDOW_WIDTH / 20.000f), (WINDOW_HEIGHT / 15.555f));}
    
    if(this.direction == LEFT) {rect((x + (WINDOW_WIDTH / 17.500f)), y, (WINDOW_WIDTH / 20), (WINDOW_HEIGHT / 20));}
    else if (this.direction == RIGHT) {rect((x - (WINDOW_WIDTH / 17.500f)), y, (WINDOW_WIDTH / 20), (WINDOW_HEIGHT / 20));}
    else if (this.direction == UP) {rect(x, (y + (WINDOW_HEIGHT / 17.500f)), (WINDOW_WIDTH / 20), (WINDOW_HEIGHT / 20));}
    else if (this.direction == DOWN) {rect(x, (y - (WINDOW_HEIGHT / 17.500f)), (WINDOW_WIDTH / 20), (WINDOW_HEIGHT / 20));}

    //Wheels
    fill(BLACK);
    if(this.direction == LEFT)
    {
      rect((x - (WINDOW_WIDTH / 69.651f)), (y - (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
      rect((x - (WINDOW_WIDTH / 69.651f)), (y + (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
      rect((x + (WINDOW_WIDTH / 15.555f)), (y - (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
      rect((x + (WINDOW_WIDTH / 15.555f)), (y + (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
    }
    else if(this.direction == RIGHT)
    {
      rect((x + (WINDOW_WIDTH / 69.651f)), (y - (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
      rect((x + (WINDOW_WIDTH / 69.651f)), (y + (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
      rect((x - (WINDOW_WIDTH / 15.555f)), (y - (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
      rect((x - (WINDOW_WIDTH / 15.555f)), (y + (WINDOW_HEIGHT / 35.000f)), (WINDOW_WIDTH / 46.666f), (WINDOW_HEIGHT / 233.333f));
    }
    else if(this.direction == UP)
    {
      rect((x - (WINDOW_WIDTH / 35)), (y - (WINDOW_HEIGHT / 69.651f)), (WINDOW_WIDTH / 233.333f), (WINDOW_HEIGHT / 46.666f));
      rect((x + (WINDOW_WIDTH / 35)), (y - (WINDOW_HEIGHT / 69.651f)), (WINDOW_WIDTH / 233.333f), (WINDOW_HEIGHT / 46.666f));
      rect((x - (WINDOW_WIDTH / 35)), (y + (WINDOW_HEIGHT / 15.555f)), (WINDOW_WIDTH / 233.333f), (WINDOW_HEIGHT / 46.666f));
      rect((x + (WINDOW_WIDTH / 35)), (y + (WINDOW_HEIGHT / 15.555f)), (WINDOW_WIDTH / 233.333f), (WINDOW_HEIGHT / 46.666f));
    }
    else if(this.direction == DOWN)
    {
      rect((x - (WINDOW_WIDTH / 35)), (y + (WINDOW_HEIGHT / 69.651f)), (WINDOW_WIDTH / 233.333f), (WINDOW_HEIGHT / 46.666f));
      rect((x + (WINDOW_WIDTH / 35)), (y + (WINDOW_HEIGHT / 69.651f)), (WINDOW_WIDTH / 233.333f), (WINDOW_WIDTH / 46.666f));
      rect((x - (WINDOW_WIDTH / 35)), (y - (WINDOW_HEIGHT / 15.555f)), (WINDOW_WIDTH / 233.333f), (WINDOW_WIDTH / 46.666f));
      rect((x + (WINDOW_WIDTH / 35)), (y - (WINDOW_HEIGHT / 15.555f)), (WINDOW_WIDTH / 233.333f), (WINDOW_WIDTH / 46.666f));
    }
  }

  public void update()
  {
    if(this.direction == LEFT) {this.x += this.currentSpeed;}
    else if(this.direction == RIGHT) {this.x -= this.currentSpeed;}
    else if(this.direction == UP) {this.y += this.currentSpeed;}
    else if(this.direction == DOWN) {this.y -= this.currentSpeed;}
  }
  
  public void stop()
  {
    this.currentSpeed = 0;
  }
  
  public void resume()
  {
    this.currentSpeed = this.maxSpeed;
  }
   
  public void respawnCar()
  {
    if((this.direction == LEFT) && (this.getX() > (WINDOW_WIDTH / 0.896f))) {leftCar = new Car(-(WINDOW_WIDTH / 8.641f), (WINDOW_HEIGHT / 1.842f), random((WINDOW_WIDTH / 155.555f), (WINDOW_WIDTH / 116.666f)), color(random(255), random(255), random(255)), LEFT);}
    else if((this.direction == RIGHT) && (this.getX() < (-(WINDOW_WIDTH / 8.641f)))) {rightCar = new Car((WINDOW_WIDTH / 0.896f), (WINDOW_HEIGHT / 2.180f), random((WINDOW_WIDTH / 155.555f), (WINDOW_WIDTH / 116.666f)), color(random(255), random(255), random(255)), RIGHT);}
    else if((this.direction == UP) && (this.getY() > (WINDOW_HEIGHT / 0.896f))) {topCar = new Car((WINDOW_WIDTH / 2.180f), -(WINDOW_HEIGHT / 8.641f), random((WINDOW_HEIGHT / 155.555f), (WINDOW_HEIGHT / 116.666f)), color(random(255), random(255), random(255)), UP);}
    else if((this.direction == DOWN) && (this.getY() < -(WINDOW_HEIGHT / 8.641f))) {bottomCar = new Car((WINDOW_WIDTH / 1.846f), (WINDOW_HEIGHT / 0.896f), random((WINDOW_HEIGHT / 155.555f), (WINDOW_HEIGHT / 116.666f)), color(random(255), random(255), random(255)), DOWN);}
  }
}
final float PIXEL_ERROR_MARGIN = WINDOW_WIDTH / 150;

Car leftCar = new Car(-(WINDOW_WIDTH / 8.641f), (WINDOW_HEIGHT / 1.842f), random((WINDOW_WIDTH / 155.555f), (WINDOW_WIDTH / 116.666f)), color(random(255), random(255), random(255)), LEFT);
Car rightCar = new Car((WINDOW_WIDTH / 0.896f), (WINDOW_HEIGHT / 2.180f), random((WINDOW_WIDTH / 155.555f), (WINDOW_WIDTH / 116.666f)), color(random(255), random(255), random(255)), RIGHT);
Car topCar = new Car((WINDOW_WIDTH / 2.180f), -(WINDOW_HEIGHT / 8.641f), random((WINDOW_HEIGHT / 155.555f), (WINDOW_HEIGHT / 116.666f)), color(random(255), random(255), random(255)), UP);
Car bottomCar = new Car((WINDOW_WIDTH / 1.846f), (WINDOW_HEIGHT / 0.896f), random((WINDOW_HEIGHT / 155.555f), (WINDOW_HEIGHT / 116.666f)), color(random(255), random(255), random(255)), DOWN);

TrafficLight leftLight = new TrafficLight((WINDOW_WIDTH / 4.458f), (WINDOW_HEIGHT / 1.677f), LEFT);
TrafficLight rightLight = new TrafficLight((WINDOW_WIDTH / 1.291f), (WINDOW_WIDTH / 2.479f), RIGHT);
TrafficLight topLight = new TrafficLight((WINDOW_WIDTH / 2.479f), (WINDOW_WIDTH / 4.458f), UP);
TrafficLight bottomLight = new TrafficLight((WINDOW_WIDTH / 1.676f), (WINDOW_WIDTH / 1.291f), DOWN);

class Lane
{
  public void trafficLightCarBehavior(Car c, TrafficLight s)
  {
    c.draw();
    s.draw();
    c.update();
    s.update();
    c.respawnCar();
    
    if((c.direction == LEFT && abs(c.getX() - WINDOW_WIDTH / 5.109f) <= PIXEL_ERROR_MARGIN)
      || (c.direction == RIGHT && abs(c.getX() - WINDOW_WIDTH / 1.243f) <= PIXEL_ERROR_MARGIN)
      || (c.direction == UP && abs(c.getY() - WINDOW_WIDTH / 5.109f) <= PIXEL_ERROR_MARGIN)
      || (c.direction == DOWN && abs(c.getY() - WINDOW_WIDTH / 1.243f) <= PIXEL_ERROR_MARGIN))
     {
       if(s.red == true || s.yellow == true) {c.stop();}
       else if(s.green == true) {c.resume();}
     }
  }
}
final int GRAY = color(100, 100, 100);

final int LIGHT_GRAY = color(200, 200, 200);
final int LIGHT_RED = color(255, 0, 0);
final int LIGHT_YELLOW = color(255, 255, 0);
final int LIGHT_GREEN = color(0, 255, 0);

class TrafficLight
{
  float x, y;
  int orientation;
  
  boolean red;
  boolean yellow;
  boolean green;
   
  TrafficLight(float x, float y, int orientation)
  {
    this.x = x;
    this.y = y;
    this.orientation = orientation;
  }
  
  public void draw()
  {
    //traffic light body
    fill(GRAY);
    noStroke();
    if(this.orientation == LEFT || this.orientation == RIGHT)
    {
      rect(x, y, (WINDOW_WIDTH/8.433f), (WINDOW_HEIGHT/46.666f));
      rect((this.orientation == LEFT ? (x + (WINDOW_WIDTH/8.917f)) : (x - (WINDOW_WIDTH/8.917f))), y, (WINDOW_WIDTH/9.333f), (WINDOW_HEIGHT/28.000f));
    }
    else
    {
      rect(x, y, (WINDOW_WIDTH/46.666f), (WINDOW_HEIGHT/8.433f));
      rect(x, (this.orientation == UP ? (y + (WINDOW_HEIGHT/8.917f)) : (y - (WINDOW_HEIGHT/8.917f))), (WINDOW_WIDTH/28.000f), (WINDOW_HEIGHT/9.333f));
    }

    //lights off
    fill(LIGHT_GRAY);
    noStroke();
    if(this.orientation == LEFT || this.orientation == RIGHT)
    {
      circle((this.orientation == LEFT ? (x + ((WINDOW_WIDTH/13.102f))) : (x - (WINDOW_WIDTH/13.102f))), y, (WINDOW_WIDTH/28.000f));
      circle((this.orientation == LEFT ? (x + (WINDOW_WIDTH/6.760f)) : (x - (WINDOW_WIDTH/6.760f))), y, (WINDOW_WIDTH/28.000f));
      circle((this.orientation == LEFT ? (x + (WINDOW_WIDTH/8.917f)) : (x - (WINDOW_WIDTH/8.917f))), y, (WINDOW_WIDTH/28.000f));
    }
    else if(this.orientation == UP || this.orientation == DOWN)
    {
      circle(x, (this.orientation == UP ? (y + (WINDOW_HEIGHT/13.102f)) : (y - (WINDOW_HEIGHT/13.102f))), (WINDOW_WIDTH/28.000f));
      circle(x, (this.orientation == UP ? (y + (WINDOW_HEIGHT/6.760f)) : (y - (WINDOW_HEIGHT/6.760f))), (WINDOW_WIDTH/28.000f));
      circle(x, (this.orientation == UP ? (y + (WINDOW_HEIGHT/8.917f)) : (y - (WINDOW_HEIGHT/8.917f))), (WINDOW_WIDTH/28.000f));
    }
  }
  
  public void redOn()
  {
    fill(LIGHT_RED);
    noStroke();
    if(this.orientation == LEFT || this.orientation == RIGHT) {circle((this.orientation == LEFT ? (x + (WINDOW_WIDTH/6.760f)) : (x - (WINDOW_WIDTH/6.760f))), y, (WINDOW_WIDTH/28.000f));}
    else if(this.orientation == UP || this.orientation == DOWN) {circle(x, (this.orientation == UP ? (y + (WINDOW_HEIGHT/6.760f)) : (y - (WINDOW_HEIGHT/6.760f))), (WINDOW_WIDTH/28.000f));}
    red = true;
    yellow = false;
    green = false;
  }

  public void yellowOn()
  {
    fill(LIGHT_YELLOW);
    noStroke();
    if(this.orientation == LEFT || this.orientation == RIGHT) {circle((this.orientation == 1 ? (x + (WINDOW_WIDTH/8.917f)) : (x - (WINDOW_WIDTH/8.917f))), y, (WINDOW_WIDTH/28.000f));}
    else if(this.orientation == UP || this.orientation == DOWN) {circle(x, (this.orientation == UP ? (y + (WINDOW_HEIGHT/8.917f)) : (y - (WINDOW_HEIGHT/8.917f))), (WINDOW_WIDTH/28.000f));}
    red = false;
    yellow = true;
    green = false;
  }
  
  public void greenOn()
  {
    fill(LIGHT_GREEN);
    noStroke();
    if(this.orientation == LEFT || this.orientation == RIGHT) {circle((this.orientation == LEFT ? (x + ((WINDOW_WIDTH/13.102f))) : (x - (WINDOW_WIDTH/13.102f))), y, (WINDOW_WIDTH/28.000f));}
    else if(this.orientation == UP || this.orientation == DOWN) {circle(x, (this.orientation == UP ? (y + (WINDOW_HEIGHT/13.102f)) : (y - (WINDOW_HEIGHT/13.102f))), (WINDOW_WIDTH/28.000f));}
    red = false;
    yellow = false;
    green = true;
  }

  public void update()
  {
    int phase = ((millis()/7000) % 3); //each phase lasts 4 seconds
    
    if(this.orientation == LEFT || this.orientation == RIGHT)
    {
      if(phase == 0) {this.greenOn();}
      else if(phase == 1) {this.yellowOn();}
      else if(phase == 2) {this.redOn();}
    }  
    else if(this.orientation == UP || this.orientation == DOWN)
    {
      if(phase == 0) {this.redOn();}
      else if(phase == 1) {this.yellowOn();}
      else if(phase == 2) {this.greenOn();}
    } 
  }
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--stop-color=#cccccc", "Client" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
